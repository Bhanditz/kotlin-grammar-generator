/*
class Example(a : Foo, i : Int) : Bar(i), Some {
  // constrtuctors:
  public this(a : Foo) : this(a, 0)

  public this(a : Foo) : Bar(5), Some(a) {
    // code
  }

  // functions
  abstract fun foo(a : Bar)

  fun foo(a : Bar) = 0

  fun foo(a : Bar) = {
    return 0
  }

  fun foo(a : Bar) { // return type is Unit

  // properties
  val x : Int = 5
  var y : Double = 7.0d
  var z : String = "SDfsdf" {
    get() = $z + "sdfsd"
    private set(s : String) { $z = s }
  }
}
*/

// h5. Grammar

memberDeclaration
  : classObject
  : constructor
  : function
  : property
  : class
  : extension
  : typedef
  : anonymousInitializer
  ;

classObject
  : modifiers "class" objectLiteral
  ;

constructor
  : modifiers "this" functionParameters (":" initializer{","}) block?
  ;

functionParameters
  : "(" functionParameter{","}? ")" // default values
  ;

functionParameter
  : modifiers functionParameterRest
  ;

functionParameterRest
  : parameter ("=" expression)?
  ;

initializer
  : attributes "this" valueArguments
  : attributes constructorInvocation // type parameters may (must?) be omitted
  ;

block
  : "{" expressions "}"
  ;

function
  : modifiers "fun" (type ".")? attributes/*for receiver type*/ typeParameters? functionParameters (":" type)? functionBody?
  ;

functionBody
  : block
  : "=" expression
  ;

property
  : modifiers ("val" | "var") attributes (type ".")? SimpleName (":" type)? ("=" expression SEMI?)?
      (getter? setter? | setter? getter?) SEMI?
  ;

getter
  : modifiers "get" "(" ")" (":" type)? functionBody
  ;

setter
  : modifiers "set" "(" modifiers (SimpleName | parameter) ")" functionBody // TODO: Can the parameter be lazy?
  ;

parameter
  : SimpleName ":" type
  ;