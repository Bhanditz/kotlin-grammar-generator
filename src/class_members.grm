/*
class Example(a : Foo, i : Int) : Bar(i), Some {
  // constrtuctors:
  public this(a : Foo) : this(a, 0)

  public this(a : Foo) : Bar(5), Some(a) {
    // code
  }

  // functions
  abstract fun foo(a : Bar)

  fun foo(a : Bar) = 0

  fun foo(a : Bar) = {
    return 0
  }

  fun foo(a : Bar) { // return type is Unit

  // properties
  val x : Int = 5
  var y : Double = 7.0d
  var z : String = "SDfsdf" {
    get() = $z + "sdfsd"
    private set(s : String) { $z = s } // TODO: allow to omit the type here?
  }
}
*/

// h5. Grammar

memberDeclaration
  : classObject
  : constructor
  : decomposer
  : method
  : property
  : class
  ;

classObject
  : "class" objectLiteral
  ;

constructor
  : accessModifier? "this" functionParameters (":" initializers) block
  ;

functionParameters
  : "(" functionParameter{","}? ")" // default values
  ;

functionParameter
  : parameterKind parameter ("=" expression)?
  ;

parameterKind
  : "lazy"
  : "out"
  : "ref"
  ;

initializers
  : "this" valueArguments
  : constructorInvocation // type parameters may (must?) be omitted
  ;

block
  : "{" expression "}"
  ;

decomposer  // TODO: consider other names
  : "decomposer" SimpleName "(" SimpleName{","} ")" // Public properties only
  ;

method
  : memberModifier* "fun" functionRest
  ;

memberModifier
  : accessModifier
  : "override"
  : "virtual"
  : "abstract"
  : // TODO: inline
  ;

functionRest
  : SimpleName typeParameters? functionParameters (":" type)? functionBody?
  ;

functionBody
  : block
  : "=" expression
  ;

property
  : memberModifier* "lazy"? ("val" | "var") propertyRest
  ;

propertyRest
  : SimpleName (":" type)? ("=" expression)?
    "{" getter? setter? "}"
  ;

getter
  : memberModifier* "get" "(" ")" functionBody
  ;

setter
  : memberModifier* "set" "(" parameter ")" functionBody
  ;

parameter
  : SimpleName ":" type
  ;