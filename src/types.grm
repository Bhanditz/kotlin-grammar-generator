/*

Foo<Bar<X>, T, Object> // user type
{(A, Object) : Foo} // function type
{ () : Foo} // function with no arguments
(A, B, C) // tuple type
(a : A, b : B) // tuple type with named entries
() // 0-ary tuple type (Unit)

*/

type
  : attributes typeDescriptor

typeDescriptor
  : selfType
  : functionType
  : userType
  : tupleType
  : nullableType
  ;

nullableType
  : typeDescriptor "?"

selfType
  : "This"
  ;

userType
  : ("namespace" ".")? simpleUserType{"."}
  ;

simpleUserType
  : SimpleName ("<" (optionalProjection type | "*"){","} ">")?
  ;

optionalProjection
  : modifiers
  ;

functionType
  : "{" (type ".")? functionTypeContents "}"
  ;

functionTypeContents
  : "(" (parameter | modifiers /*lazy out ref*/ type){","} ")" ":" type
  ;

tupleType
  : "(" type{","}? ")"
  : "(" parameter{","} ")" // tuple with named entries, the names do not affect assignment compatibility
  ;

////////////////////////////////////////