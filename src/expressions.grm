expression
  : "(" expression ")" // see tupleLiteral
  : "new" constructorInvocation
  : literalConstant
  : functionLiteral
  : tupleLiteral
  : listLiteral
  : mapLiteral
  : typeLiteral
  : "null"
  : binOpExpression
  : unOpExpression
  : functionCall
  : arrayAccess
  : match
  : FieldName
  : if
// TODO: list comprehension
  : jump
  ;

binaryOperation // Decreasing precedence
  : "*" : "/"    // No %
  : "+" : "-"
  // No << >> >>>
  : "<" : ">" : ">=" : "<=" : "is" : "isnot" : "in" : "as" // TODO: Check the precedence for in carefully 
  : "==" : "==="
  // No | & ^ ~
  : "&&"
  : "||"
  ;

assignments
  : "="
  : "+=" : "-=" : "*=" : "/=" // TODO: |=, %= and <<= make more sense than |, % or << alone, and so for others
  ;

prefixUnaryOperation
  : "-" : "+"
  : "++" : "--"
  : "!"  // No ~
  ;

postfixUnaryOperation
  : "++" : "--"
  ;

functionCall
  : completeFunctionCall
  : onlyTypeParameters
  : infixFunctionCall

jump
  : "throw" expression
  : "return" expression
  : "continue" SimpleName
  : "break" SimpleName
// yield ?
  ;

tupleLiteral // No, (a) is not a tuple
  : "(" ")"
  : "(" expression  ("," expression)+ ")"
  ;

functionLiteral
  : "{" SimpleName "=>" expression "}"
  : "{" functionTypeContents "=>" expression "}"
  : "{" "(" parameter{","} ")" "=>" expression "}"
  ;

constructorInvocation
  : userType "(" expression{","} ")"
  ;

listLiteral
  : "[" expression{","} "]"
  ;

mapLiteral
  : "[" mapEntryLiteral ("," mapEntryLiteral)* "]"
  : "[" ":" "]"
  ;

mapEntryLiteral
  : expression ":" expression
  ;